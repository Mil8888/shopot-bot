import os
from aiohttp import web
from aiohttp.web import Response, json_response
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHANNEL_ID = os.getenv("CHANNEL_ID")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
PUBLIC_URL = os.getenv("PUBLIC_URL") or os.getenv("RENDER_EXTERNAL_URL")

bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# ====== –°–¢–†–ê–ù–ò–¶–ê –° –§–û–†–ú–û–ô ======
HTML_PAGE = """
<!doctype html><html lang="ru"><head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>–®—ë–ø–æ—Ç ‚Äî –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å</title>
<style>
body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial;margin:0;background:#0f1115;color:#fff}
.wrap{max-width:720px;margin:0 auto;padding:24px}
.card{background:#151923;border-radius:16px;padding:20px;box-shadow:0 10px 30px rgba(0,0,0,.25)}
h1{margin:0 0 8px;font-size:28px} p{margin:0 0 16px;opacity:.85}
textarea{width:100%;min-height:140px;border-radius:12px;border:1px solid #2a3346;background:#0f1115;color:#fff;padding:12px;font-size:16px;outline:none}
button{margin-top:12px;width:100%;padding:14px;border:none;border-radius:12px;background:#4c7cff;color:#fff;font-weight:600;font-size:16px}
.ok{background:#1f8b4c;padding:12px;border-radius:10px;margin-top:12px;display:none}
.err{background:#8b2a2a;padding:12px;border-radius:10px;margin-top:12px;display:none}
.foot{margin-top:16px;opacity:.6;font-size:13px;text-align:center}
</style></head><body>
<div class="wrap"><div class="card">
<h1>–®—ë–ø–æ—Ç ‚Äî –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å</h1>
<p>–ù–∞–ø–∏—à–∏—Ç–µ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å. –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.</p>
<form id="f">
  <textarea name="text" placeholder="–í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å‚Ä¶" maxlength="1500" required></textarea>
  <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ</button>
  <div id="ok" class="ok">–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</div>
  <div id="err" class="err">–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</div>
</form>
<div class="foot">–ê–Ω—Ç–∏-—Å–ø–∞–º –∏ –±–µ—Ä–µ–∂–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω—ã.</div>
</div></div>
<script>
const f=document.getElementById('f');
f.addEventListener('submit',async(e)=>{
  e.preventDefault();
  const fd=new FormData(f);
  const res=await fetch('/ask',{method:'POST',body:fd});
  document.getElementById(res.ok?'ok':'err').style.display='block';
  if(res.ok) f.reset();
});
</script>
</body></html>
"""

# ====== HTTP-—Ä–æ—É—Ç—ã ======
async def index_handler(request: web.Request):
    return Response(text=HTML_PAGE, content_type="text/html")

async def ask_handler(request: web.Request):
    text = None
    if request.can_read_body:
        ct = request.headers.get("Content-Type","")
        if "application/json" in ct:
            data = await request.json()
            text = (data or {}).get("text")
        else:
            data = await request.post()
            text = data.get("text")
    text = (text or "").strip()
    if not text:
        return json_response({"ok": False, "error": "no text"}, status=400)
    if len(text) > 1500:
        text = text[:1500] + "‚Ä¶"

    if ADMIN_ID:
        kb = None
        if CHANNEL_ID:
            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="pub"),
            ]])
        await bot.send_message(chat_id=ADMIN_ID, text=f"üïä <b>–ê–Ω–æ–Ω–∏–º</b> –Ω–∞–ø–∏—Å–∞–ª:\n\n{text}", reply_markup=kb)
    return json_response({"ok": True})

async def webhook_handler(request: web.Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.process_update(update)
    return web.Response()

# ====== –ö–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ======
@dp.callback_query_handler(lambda c: c.data == "pub")
async def on_pub(c: types.CallbackQuery):
    if not CHANNEL_ID:
        await c.answer("CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
        return
    original = c.message.html_text.replace("üïä <b>–ê–Ω–æ–Ω–∏–º<
/b> –Ω–∞–ø–∏—Å–∞–ª:\n\n", "")
    pub_text = f"‚ùì <b>–ê–Ω–æ–Ω–∏–º —Å–ø—Ä–æ—Å–∏–ª</b>:\n\n{original}\n\n‚Äî –û—Ç–≤–µ—Ç –Ω–∏–∂–µ ‚Äî"
    try:
        await bot.send_message(chat_id=int(CHANNEL_ID), text=pub_text)
        await c.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
    except Exception as e:
        await c.answer(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}", show_alert=True)

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    ask_link = (PUBLIC_URL or "").rstrip("/") + "/"
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ <b>–®—ë–ø–æ—Ç</b>.\n"
                   f"–ó–∞–¥–∞–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: {ask_link}\n\n"
                   "–ö–æ–º–∞–Ω–¥—ã:\n/link ‚Äî –º–æ—è —Å—Å—ã–ª–∫–∞\n/help ‚Äî –ø–æ–º–æ—â—å")

@dp.message_handler(commands=["link"])
async def cmd_link(m: types.Message):
    ask_link = (PUBLIC_URL or "").rstrip("/") + "/"
    await m.answer(f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤: {ask_link}")

@dp.message_handler(commands=["help"])
async def cmd_help(m: types.Message):
    await m.answer("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
                   "1) –õ—é–¥–∏ –ø–∏—à—É—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É.\n"
                   "2) –í–æ–ø—Ä–æ—Å—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —ç—Ç–æ—Ç –±–æ—Ç.\n"
                   "3) –ö–Ω–æ–ø–∫–æ–π –º–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω CHANNEL_ID).")

# ====== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ======
async def on_startup(app):
    if PUBLIC_URL:
        await bot.set_webhook(PUBLIC_URL.rstrip("/") + WEBHOOK_PATH)

async def on_shutdown(app):
    await bot.delete_webhook()

def make_app():
    app = web.Application()
    app.router.add_get("/", index_handler)
    app.router.add_post("/ask", ask_handler)
    app.router.add_post(WEBHOOK_PATH, webhook_handler)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app

if __name__ == "__main__":
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ—Ç BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    web.run_app(make_app(), host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
